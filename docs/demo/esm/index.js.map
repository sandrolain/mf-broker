{"version":3,"file":"index.js","sources":["../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/regex.js","../../node_modules/uuid/dist/esm-browser/validate.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/Broker.ts","../../src/FramesetBroker.ts","../../src/ProcedureBroker.ts"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { v4 as uuidv4 } from \"uuid\";\n\n// TODO: docs\nexport type BrokerTopic = string | string[];\n// TODO: docs\nexport type BrokerTopicCallback<T=any> = (data: T, event: BrokerCustomEvent<T>) => void;\n// TODO: docs\nexport type BrokerTarget = Window | Document | HTMLElement;\n\n// TODO: docs\nexport interface BrokerSubscription {\n  broker: Broker;\n  topic: string;\n  callback: BrokerTopicCallback;\n  unsubscribe: () => void;\n}\n\n// TODO: docs\nexport interface BrokerCustomEventInfo {\n  date: Date;\n  retain: boolean;\n  id: string;\n}\n\n// TODO: docs\nexport type BrokerCustomEvent<T> = CustomEvent<T> & { detailInfo?: BrokerCustomEventInfo };\n\n// TODO: docs\nexport interface BrokerRetainedData {\n  info: BrokerCustomEventInfo;\n  data: any;\n  event: Event;\n}\n\ninterface BrokerTargetExtension {\n  __MfBrokerRetained: BrokerRetainedMap;\n  __MfBrokerTargetId: string;\n  __MfBrokerInstance: Broker;\n}\n\ntype BrokerTargetExtended = Window & BrokerTargetExtension;\n\ntype BrokerRetainedMap = Map<string, BrokerRetainedData>;\n\nexport interface BrokerInterface {\n  getTarget (): Window;\n  getTargetId (): string;\n  publish<T=any> (topic: BrokerTopic, data: T, retain: boolean): BrokerRetainedData;\n  subscribe<T=any> (topic: BrokerTopic, callback: BrokerTopicCallback<T>): BrokerSubscription;\n  getRetained (topic: BrokerTopic): BrokerRetainedData;\n}\n\n// TODO: docs\nexport class Broker implements BrokerInterface {\n\n  constructor (readonly target: Window = window) {\n    const targetExt = this.target as BrokerTargetExtended;\n    targetExt.__MfBrokerRetained = new Map();\n  }\n\n  // TODO: docs\n  // TODO: test\n  getTarget (): Window {\n    return this.target;\n  }\n\n  // TODO: docs\n  // TODO: test\n  getTargetId (): string {\n    const targetExt = this.target as BrokerTargetExtended;\n    if(!targetExt.__MfBrokerTargetId) {\n      targetExt.__MfBrokerTargetId = `T-${uuidv4()}`;\n    }\n    return targetExt.__MfBrokerTargetId;\n  }\n\n  // TODO: docs\n  // TODO: test\n  publish<T=any> (topic: BrokerTopic, data: T, retain: boolean = false): BrokerRetainedData {\n    return this.publishWithTarget<T>(this.target, topic, data, retain);\n  }\n\n  // TODO: docs\n  // TODO: test\n  publishWithTarget<T=any> (target: BrokerTarget, topic: BrokerTopic, data: T, retain: boolean = false): BrokerRetainedData {\n    const info: BrokerCustomEventInfo = {\n      date: new Date(),\n      retain,\n      id: `E-${uuidv4()}`\n    };\n    return this.publishCustom(target, topic, info, data);\n  }\n\n  // TODO: docs\n  // TODO: test\n  publishCustom<T=any> (target: BrokerTarget, topic: BrokerTopic, info: BrokerCustomEventInfo, data: T): BrokerRetainedData {\n    const targetExt = this.target as BrokerTargetExtended;\n    const topicStr  = Broker.topicAsString(topic);\n    const event: BrokerCustomEvent<T> = new CustomEvent(topicStr, {\n      detail: data,\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    });\n    event.detailInfo = info;\n    const retainData = { data, info, event };\n    if(info.retain) {\n      targetExt.__MfBrokerRetained.set(topicStr, retainData);\n    }\n    target.dispatchEvent(event);\n    return retainData;\n  }\n\n  // TODO: docs\n  // TODO: test\n  subscribe<T=any> (topic: BrokerTopic, callback: BrokerTopicCallback<T>): BrokerSubscription {\n    const targetExt = this.target as BrokerTargetExtended;\n    const topicStr     = Broker.topicAsString(topic);\n    const listener     = (event: BrokerCustomEvent<T>): void => {\n      callback.call(targetExt, event.detail, event);\n    };\n\n    targetExt.addEventListener(topicStr, listener, true);\n\n    if(targetExt.__MfBrokerRetained) {\n      const lastPublish = targetExt.__MfBrokerRetained.get(topicStr);\n      if(lastPublish) {\n        // Defer execution\n        setTimeout(() => {\n          callback.call(targetExt, lastPublish.data, lastPublish.event);\n        }, 0);\n      }\n    }\n\n    return {\n      broker: this,\n      topic: topicStr,\n      callback,\n      unsubscribe: (): void => {\n        this.target.removeEventListener(topicStr, listener, true);\n      }\n    };\n  }\n\n  // TODO: docs\n  // TODO: test\n  getRetained (topic: BrokerTopic): BrokerRetainedData {\n    const targetExt = this.target as BrokerTargetExtended;\n    const topicStr     = Broker.topicAsString(topic);\n    const lastPublish  = targetExt.__MfBrokerRetained.get(topicStr);\n    if(lastPublish) {\n      return Object.assign({}, lastPublish);\n    }\n    return null;\n  }\n\n  // TODO: docs\n  // TODO: test\n  static getInstance (target: Window = window): Broker {\n    const targetExt = target as BrokerTargetExtended;\n    if(!targetExt.__MfBrokerInstance) {\n      targetExt.__MfBrokerInstance = new Broker(target);\n    }\n    return targetExt.__MfBrokerInstance;\n  }\n\n  // TODO: docs\n  // TODO: test\n  static topicAsString (topic: BrokerTopic): string {\n    if(Array.isArray(topic)) {\n      topic = topic.join(\":\");\n    }\n    return topic;\n  }\n}\n","import { BrokerCustomEventInfo, BrokerTopic, Broker, BrokerRetainedData, BrokerTopicCallback, BrokerSubscription, BrokerInterface } from \"./Broker\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface FramesetBrokerTargetExtension {\n  __MfBrokerTargetId: string;\n  __MfFramesetBrokerInstance: FramesetBroker;\n  __MfFramesetBrokerHasListener: boolean;\n}\n\ntype FramesetBrokerTargetExtended = Window & FramesetBrokerTargetExtension;\n\nexport interface FramesetBrokerMessage {\n  senderId: string;\n  id: string;\n  topic: string;\n  info: BrokerCustomEventInfo;\n  data: any;\n}\n\n// TODO: docs\n// TODO: test\nexport class FramesetBroker implements BrokerInterface {\n  private targetWindow: Window;\n\n  constructor (\n    private broker: Broker,\n    readonly acceptedOrigins: string[] = null\n  ) {\n    this.targetWindow = broker.getTarget();\n\n    if(!this.acceptedOrigins) {\n      this.acceptedOrigins = [broker.getTarget().location.origin];\n    }\n\n    this.getTargetId();\n    this.initEventPropagationListener();\n  }\n\n  // TODO: docs\n  // TODO: test\n  getTarget (): Window {\n    return this.targetWindow;\n  }\n\n  // TODO: docs\n  // TODO: test\n  getTargetId (): string {\n    return this.broker.getTargetId();\n  }\n\n  // TODO: docs\n  // TODO: test\n  publish<T=any> (topic: BrokerTopic, data: T, retain: boolean = false): BrokerRetainedData {\n    const topicStr    = Broker.topicAsString(topic);\n    const messageData = this.broker.publish<T>(topicStr, data, retain);\n    const targetExt   = this.targetWindow as FramesetBrokerTargetExtended;\n    this.requestEventPropagation({\n      senderId: targetExt.__MfBrokerTargetId,\n      id: `M-${uuidv4()}`,\n      topic: topicStr,\n      info: messageData.info,\n      data: messageData.data\n    });\n    return messageData;\n  }\n\n  // TODO: docs\n  // TODO: test\n  subscribe<T=any> (topic: BrokerTopic, callback: BrokerTopicCallback<T>): BrokerSubscription {\n    return this.broker.subscribe<T> (topic, callback);\n  }\n\n  // TODO: docs\n  // TODO: test\n  getRetained (topic: BrokerTopic): BrokerRetainedData {\n    return this.broker.getRetained(topic);\n  }\n\n  private initEventPropagationListener (): void {\n    const targetExt   = this.targetWindow as FramesetBrokerTargetExtended;\n    if(!targetExt.__MfFramesetBrokerHasListener) {\n      targetExt.addEventListener(\"message\", (event: MessageEvent) => {\n        if(this.acceptedOrigins.includes(event.origin)) {\n          const message = event.data;\n          if(this.isFramesetBrokerMessage(message) && !this.isSentFromCurrentTarget(message)) {\n            this.propagateIntoCurrentTarget(message);\n            this.propagateToChildsTargets(message, event.origin);\n          }\n        }\n      });\n      targetExt.__MfFramesetBrokerHasListener = true;\n    }\n  }\n\n  private isFramesetBrokerMessage (message: any): boolean {\n    return (message.senderId && message.id && message.info && message.data);\n  }\n\n  private isSentFromCurrentTarget (message: FramesetBrokerMessage): boolean {\n    const currentId = this.getTargetId();\n    return (message.senderId === currentId);\n  }\n\n  private requestEventPropagation (message: FramesetBrokerMessage, targetOrigin: string = this.targetWindow.location.origin): void {\n    const topWindow = this.targetWindow.top;\n    if(topWindow && topWindow !== this.targetWindow) {\n      topWindow.postMessage(message, targetOrigin);\n    }\n    this.propagateToChildsTargets(message, targetOrigin);\n  }\n\n  private getChildsTargets (): Window[] {\n    const frames = [\n      ...Array.from(this.targetWindow.document.querySelectorAll(\"frame\")),\n      ...Array.from(this.targetWindow.document.querySelectorAll(\"iframe\"))\n    ];\n    const result: Window[] = [];\n    for(const frameNode of frames) {\n      if(frameNode.contentWindow) {\n        result.push(frameNode.contentWindow);\n      }\n    }\n    return result;\n  }\n\n  private propagateIntoCurrentTarget (message: FramesetBrokerMessage): void {\n    this.broker.publishCustom(this.targetWindow, message.topic, message.info, message.data);\n  }\n\n  private propagateToChildsTargets (message: FramesetBrokerMessage, targetOrigin: string): void {\n    const targets = this.getChildsTargets();\n    targets.forEach((target: Window) => {\n      target.postMessage(message, targetOrigin);\n    });\n  }\n\n  static getInstance (broker: Broker): FramesetBroker {\n    const targetExt = broker.getTarget() as FramesetBrokerTargetExtended;\n    if(!targetExt.__MfFramesetBrokerInstance) {\n      targetExt.__MfFramesetBrokerInstance = new FramesetBroker(broker);\n    }\n    return targetExt.__MfFramesetBrokerInstance;\n  }\n}\n","import { BrokerInterface, Broker, BrokerSubscription } from \"./Broker\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// TODO: docs\nexport type ProcedureCallback<T=any> = (...args: any[]) => T;\n\ninterface ProcedureBrokerTargetExtension {\n  __MfBrokerTargetId: string;\n  __MfProcedureBrokerInstance: ProcedureBroker;\n  __MfProcedureBrokerHasListener: boolean;\n}\n\ntype ProcedureBrokerTargetExtended = Window & ProcedureBrokerTargetExtension;\n\n// TODO: docs\ninterface ProcedureRequest {\n  id: string;\n  name: string;\n  args: any[];\n  resolved: boolean;\n}\n\n// TODO: docs\ninterface ProcedureResponse<T=any> {\n  id: string;\n  name: string;\n  result: T;\n}\n\n\nconst PROCEDURE_REQUEST_TOPIC  = \"mf:proc:req\";\nconst PROCEDURE_RESPONSE_TOPIC = \"mf:proc:res\";\n\n// TODO: docs\n// TODO: test\nexport class ProcedureBroker {\n  private targetWindow: Window;\n  private registeredCallbacks: Map<string, ProcedureCallback> = new Map();\n  private subscription: BrokerSubscription;\n\n  constructor (\n    private broker: BrokerInterface,\n    private responseTimeout: number = 5000\n  ) {\n    this.targetWindow = broker.getTarget();\n    this.getTargetId();\n    this.initProcedureRequestListener();\n  }\n\n  // TODO: docs\n  // TODO: test\n  setReponseTimeout (responseTimeout: number): void {\n    this.responseTimeout = responseTimeout;\n  }\n\n  // TODO: docs\n  // TODO: test\n  getTarget (): Window {\n    return this.targetWindow;\n  }\n\n  // TODO: docs\n  // TODO: test\n  getTargetId (): string {\n    return this.broker.getTargetId();\n  }\n\n  // TODO: docs\n  // TODO: test\n  register (name: string, callback: ProcedureCallback): void  {\n    this.registeredCallbacks.set(name, callback);\n  }\n\n  // TODO: docs\n  // TODO: test\n  getCallback (name: string): ProcedureCallback {\n    return this.registeredCallbacks.get(name);\n  }\n\n  // TODO: docs\n  // TODO: test\n  call<T=any> (name: string, ...args: any[]): Promise<T> {\n    const request: ProcedureRequest = {\n      id: uuidv4(),\n      name,\n      args,\n      resolved: false\n    };\n\n    // Check immediately if there is a callback in this scope so as to avoid generating events\n    const callback = this.getCallback(request.name);\n    if(callback) {\n      return this.applyCallback<T>(request, callback);\n    }\n\n    return new Promise((resolve, reject) => {\n      let tou: number = null;\n      const subscription = this.broker.subscribe(`${PROCEDURE_RESPONSE_TOPIC}:${request.id}`, (response: ProcedureResponse<T>) => {\n        subscription.unsubscribe();\n        window.clearTimeout(tou);\n        resolve(response.result);\n      });\n      tou = window.setTimeout(() => {\n        subscription.unsubscribe();\n        reject(new Error(`Procedure request timeout (${this.responseTimeout}) for callback with name \"${name}\"`));\n      }, this.responseTimeout);\n      this.broker.publish(PROCEDURE_REQUEST_TOPIC, request, false);\n    });\n  }\n\n  private initProcedureRequestListener (): void {\n    const targetExt   = this.targetWindow as ProcedureBrokerTargetExtended;\n    if(!targetExt.__MfProcedureBrokerHasListener) {\n      this.subscription = this.broker.subscribe(PROCEDURE_REQUEST_TOPIC, async (request: ProcedureRequest) => {\n        const callback = this.getCallback(request.name);\n        if(callback) {\n          const result = await this.applyCallback(request, callback);\n          const response: ProcedureResponse = {\n            id: request.id,\n            name: request.name,\n            result\n          };\n          this.broker.publish(`${PROCEDURE_RESPONSE_TOPIC}:${request.id}`, response, false);\n        }\n      });\n      targetExt.__MfProcedureBrokerHasListener = true;\n    }\n  }\n\n  private async applyCallback<T> (request: ProcedureRequest, callback: ProcedureCallback<T>): Promise<T> {\n    let result = callback(...request.args);\n    request.resolved = true;\n    if(result instanceof Promise) {\n      result = await result;\n    }\n    return result;\n  }\n\n  // TODO: docs\n  // TODO: test\n  static getInstance (broker: Broker, responseTimeout: number): ProcedureBroker {\n    const targetExt = broker.getTarget() as ProcedureBrokerTargetExtended;\n    if(!targetExt.__MfProcedureBrokerInstance) {\n      targetExt.__MfProcedureBrokerInstance = new ProcedureBroker(broker, responseTimeout);\n    }\n    return targetExt.__MfProcedureBrokerInstance;\n  }\n}\n"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","v4","options","buf","offset","rnds","random","arr","arguments","length","undefined","toLowerCase","TypeError","stringify","Broker","[object Object]","target","window","this","__MfBrokerRetained","Map","targetExt","__MfBrokerTargetId","uuidv4","topic","data","retain","publishWithTarget","info","date","Date","id","publishCustom","topicStr","topicAsString","event","CustomEvent","detail","bubbles","cancelable","composed","detailInfo","retainData","set","dispatchEvent","callback","listener","call","addEventListener","lastPublish","get","setTimeout","broker","unsubscribe","removeEventListener","Object","assign","__MfBrokerInstance","Array","isArray","join","FramesetBroker","acceptedOrigins","targetWindow","getTarget","location","origin","getTargetId","initEventPropagationListener","messageData","publish","requestEventPropagation","senderId","subscribe","getRetained","__MfFramesetBrokerHasListener","includes","message","isFramesetBrokerMessage","isSentFromCurrentTarget","propagateIntoCurrentTarget","propagateToChildsTargets","currentId","targetOrigin","topWindow","top","postMessage","frames","from","document","querySelectorAll","result","frameNode","contentWindow","getChildsTargets","forEach","__MfFramesetBrokerInstance","ProcedureBroker","responseTimeout","initProcedureRequestListener","name","registeredCallbacks","args","request","resolved","getCallback","applyCallback","Promise","resolve","reject","tou","subscription","response","clearTimeout","__MfProcedureBrokerHasListener","__MfProcedureBrokerInstance"],"mappings":"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"}