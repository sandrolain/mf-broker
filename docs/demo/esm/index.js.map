{"version":3,"file":"index.js","sources":["../../src/tools.ts","../../src/Broker.ts","../../src/FramesetBroker.ts","../../src/ProcedureBroker.ts"],"sourcesContent":["\n\n// TODO: replace with tools one\nexport function uuidv4 (): string {\n  if(window.crypto) {\n    return ((1e7).toString() + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (k: string) => {\n      const c = parseInt(k, 10);\n      return (c ^ window.crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);\n    });\n  }\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c): string {\n    const r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","import { uuidv4 } from \"./tools\";\n\nexport type BrokerTopic = string | string[];\nexport type BrokerTopicCallback<T=any> = (data: T, event: Event) => void;\nexport type BrokerTarget = Window | Document | HTMLElement;\n\nexport interface BrokerSubscription {\n  broker: Broker;\n  topic: string;\n  callback: BrokerTopicCallback;\n  unsubscribe: () => void;\n}\n\nexport interface BrokerCustomEventInfo {\n  date: Date;\n  retain: boolean;\n  id: string;\n}\n\nexport type BrokerCustomEvent<T> = CustomEvent<T> & { detailInfo?: BrokerCustomEventInfo };\n\nexport interface BrokerRetainedData {\n  info: BrokerCustomEventInfo;\n  data: any;\n  event: Event;\n}\n\ninterface BrokerTargetExtension {\n  __MfBrokerRetained: BrokerRetainedMap;\n  __MfBrokerTargetId: string;\n  __MfBrokerInstance: Broker;\n}\n\ntype BrokerTargetExtended = Window & BrokerTargetExtension;\n\ntype BrokerRetainedMap = Map<string, BrokerRetainedData>;\n\nexport interface BrokerInterface {\n  getTarget (): Window;\n  getTargetId (): string;\n  publish<T=any> (topic: BrokerTopic, data: T, retain: boolean): BrokerRetainedData;\n  subscribe<T=any> (topic: BrokerTopic, callback: BrokerTopicCallback<T>): BrokerSubscription;\n  getRetained (topic: BrokerTopic): BrokerRetainedData;\n}\n\nexport class Broker implements BrokerInterface {\n\n  constructor (readonly target: Window = window) {\n    const targetExt = this.target as BrokerTargetExtended;\n    targetExt.__MfBrokerRetained = new Map();\n  }\n\n  getTarget (): Window {\n    return this.target;\n  }\n\n  getTargetId (): string {\n    const targetExt = this.target as BrokerTargetExtended;\n    if(!targetExt.__MfBrokerTargetId) {\n      targetExt.__MfBrokerTargetId = `T-${uuidv4()}`;\n    }\n    return targetExt.__MfBrokerTargetId;\n  }\n\n  publish<T=any> (topic: BrokerTopic, data: T, retain: boolean = false): BrokerRetainedData {\n    return this.publishWithTarget<T>(this.target, topic, data, retain);\n  }\n\n  publishWithTarget<T=any> (target: BrokerTarget, topic: BrokerTopic, data: T, retain: boolean = false): BrokerRetainedData {\n    const info: BrokerCustomEventInfo = {\n      date: new Date(),\n      retain,\n      id: `E-${uuidv4()}`\n    };\n    return this.publishCustom(target, topic, info, data);\n  }\n\n  publishCustom<T=any> (target: BrokerTarget, topic: BrokerTopic, info: BrokerCustomEventInfo, data: T): BrokerRetainedData {\n    const targetExt = this.target as BrokerTargetExtended;\n    const topicStr  = Broker.topicAsString(topic);\n    const event: BrokerCustomEvent<T> = new CustomEvent(topicStr, {\n      detail: data,\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    });\n    event.detailInfo = info;\n    const retainData = { data, info, event };\n    if(info.retain) {\n      targetExt.__MfBrokerRetained.set(topicStr, retainData);\n    }\n    target.dispatchEvent(event);\n    return retainData;\n  }\n\n  subscribe<T=any> (topic: BrokerTopic, callback: BrokerTopicCallback<T>): BrokerSubscription {\n    const targetExt = this.target as BrokerTargetExtended;\n    const topicStr     = Broker.topicAsString(topic);\n    const listener     = (event: BrokerCustomEvent<T>): void => {\n      callback.call(targetExt, event.detail, event);\n    };\n\n    targetExt.addEventListener(topicStr, listener, true);\n\n    if(targetExt.__MfBrokerRetained) {\n      const lastPublish = targetExt.__MfBrokerRetained.get(topicStr);\n      if(lastPublish) {\n        callback.call(targetExt, lastPublish.data, lastPublish.event);\n      }\n    }\n\n    return {\n      broker: this,\n      topic: topicStr,\n      callback,\n      unsubscribe: (): void => {\n        this.target.removeEventListener(topicStr, listener, true);\n      }\n    };\n  }\n\n\n\n  getRetained (topic: BrokerTopic): BrokerRetainedData {\n    const targetExt = this.target as BrokerTargetExtended;\n    const topicStr     = Broker.topicAsString(topic);\n    const lastPublish  = targetExt.__MfBrokerRetained.get(topicStr);\n    if(lastPublish) {\n      return Object.assign({}, lastPublish);\n    }\n    return null;\n  }\n\n  static getInstance (target: Window = window): Broker {\n    const targetExt = target as BrokerTargetExtended;\n    if(!targetExt.__MfBrokerInstance) {\n      targetExt.__MfBrokerInstance = new Broker(target);\n    }\n    return targetExt.__MfBrokerInstance;\n  }\n\n  static topicAsString (topic: BrokerTopic): string {\n    if(Array.isArray(topic)) {\n      topic = topic.join(\":\");\n    }\n    return topic;\n  }\n}\n","import { BrokerCustomEventInfo, BrokerTopic, Broker, BrokerRetainedData, BrokerTopicCallback, BrokerSubscription, BrokerInterface } from \"./Broker\";\nimport { uuidv4 } from \"./tools\";\n\ninterface FramesetBrokerTargetExtension {\n  __MfBrokerTargetId: string;\n  __MfFramesetBrokerInstance: FramesetBroker;\n  __MfFramesetBrokerHasListener: boolean;\n}\n\ntype FramesetBrokerTargetExtended = Window & FramesetBrokerTargetExtension;\n\nexport interface FramesetBrokerMessage {\n  senderId: string;\n  id: string;\n  topic: string;\n  info: BrokerCustomEventInfo;\n  data: any;\n}\n\nexport class FramesetBroker implements BrokerInterface {\n  private targetWindow: Window;\n\n  constructor (\n    private broker: Broker,\n    readonly acceptedOrigins: string[] = null\n  ) {\n    this.targetWindow = broker.getTarget();\n\n    if(!this.acceptedOrigins) {\n      this.acceptedOrigins = [broker.getTarget().location.origin];\n    }\n\n    this.getTargetId();\n    this.initEventPropagationListener();\n  }\n\n  getTarget (): Window {\n    return this.targetWindow;\n  }\n\n  getTargetId (): string {\n    return this.broker.getTargetId();\n  }\n\n  publish<T=any> (topic: BrokerTopic, data: T, retain: boolean = false): BrokerRetainedData {\n    const topicStr    = Broker.topicAsString(topic);\n    const messageData = this.broker.publish<T>(topicStr, data, retain);\n    const targetExt   = this.targetWindow as FramesetBrokerTargetExtended;\n    this.requestEventPropagation({\n      senderId: targetExt.__MfBrokerTargetId,\n      id: `M-${uuidv4()}`,\n      topic: topicStr,\n      info: messageData.info,\n      data: messageData.data\n    });\n    return messageData;\n  }\n\n  subscribe<T=any> (topic: BrokerTopic, callback: BrokerTopicCallback<T>): BrokerSubscription {\n    return this.broker.subscribe<T> (topic, callback);\n  }\n\n  getRetained (topic: BrokerTopic): BrokerRetainedData {\n    return this.broker.getRetained(topic);\n  }\n\n  private initEventPropagationListener (): void {\n    const targetExt   = this.targetWindow as FramesetBrokerTargetExtended;\n    if(!targetExt.__MfFramesetBrokerHasListener) {\n      targetExt.addEventListener(\"message\", (event: MessageEvent) => {\n        if(this.acceptedOrigins.includes(event.origin)) {\n          const message = event.data;\n          if(this.isFramesetBrokerMessage(message) && !this.isSentFromCurrentTarget(message)) {\n            this.propagateIntoCurrentTarget(message);\n            this.propagateToChildsTargets(message, event.origin);\n          }\n        }\n      });\n      targetExt.__MfFramesetBrokerHasListener = true;\n    }\n  }\n\n  private isFramesetBrokerMessage (message: any): boolean {\n    return (message.senderId && message.id && message.info && message.data);\n  }\n\n  private isSentFromCurrentTarget (message: FramesetBrokerMessage): boolean {\n    const currentId = this.getTargetId();\n    return (message.senderId === currentId);\n  }\n\n  private requestEventPropagation (message: FramesetBrokerMessage, targetOrigin: string = this.targetWindow.location.origin): void {\n    const topWindow = this.targetWindow.top;\n    if(topWindow && topWindow !== this.targetWindow) {\n      topWindow.postMessage(message, targetOrigin);\n    }\n    this.propagateToChildsTargets(message, targetOrigin);\n  }\n\n  private getChildsTargets (): Window[] {\n    const frames = [\n      ...Array.from(this.targetWindow.document.querySelectorAll(\"frame\")),\n      ...Array.from(this.targetWindow.document.querySelectorAll(\"iframe\"))\n    ];\n    const result: Window[] = [];\n    for(const frameNode of frames) {\n      if(frameNode.contentWindow) {\n        result.push(frameNode.contentWindow);\n      }\n    }\n    return result;\n  }\n\n  private propagateIntoCurrentTarget (message: FramesetBrokerMessage): void {\n    this.broker.publishCustom(this.targetWindow, message.topic, message.info, message.data);\n  }\n\n  private propagateToChildsTargets (message: FramesetBrokerMessage, targetOrigin: string): void {\n    const targets = this.getChildsTargets();\n    targets.forEach((target: Window) => {\n      target.postMessage(message, targetOrigin);\n    });\n  }\n\n  static getInstance (broker: Broker): FramesetBroker {\n    const targetExt = broker.getTarget() as FramesetBrokerTargetExtended;\n    if(!targetExt.__MfFramesetBrokerInstance) {\n      targetExt.__MfFramesetBrokerInstance = new FramesetBroker(broker);\n    }\n    return targetExt.__MfFramesetBrokerInstance;\n  }\n}\n","import { BrokerInterface, Broker, BrokerSubscription } from \"./Broker\";\nimport { uuidv4 } from \"./tools\";\n\nexport type ProcedureCallback<T=any> = (...args: any[]) => T;\n\ninterface ProcedureBrokerTargetExtension {\n  __MfBrokerTargetId: string;\n  __MfProcedureBrokerInstance: ProcedureBroker;\n  __MfProcedureBrokerHasListener: boolean;\n}\n\ntype ProcedureBrokerTargetExtended = Window & ProcedureBrokerTargetExtension;\n\ninterface ProcedureRequest {\n  id: string;\n  name: string;\n  args: any[];\n  resolved: boolean;\n}\n\ninterface ProcedureResponse<T=any> {\n  id: string;\n  name: string;\n  result: T;\n}\n\n\nconst PROCEDURE_REQUEST_TOPIC  = \"mf:proc:req\";\nconst PROCEDURE_RESPONSE_TOPIC = \"mf:proc:res\";\n\nexport class ProcedureBroker {\n  private targetWindow: Window;\n  private registeredCallbacks: Map<string, ProcedureCallback> = new Map();\n  private subscription: BrokerSubscription;\n\n  constructor (\n    private broker: BrokerInterface,\n    private responseTimeout: number = 5000\n  ) {\n    this.targetWindow = broker.getTarget();\n    this.getTargetId();\n    this.initProcedureRequestListener();\n  }\n\n  setReponseTimeout (responseTimeout: number): void {\n    this.responseTimeout = responseTimeout;\n  }\n\n  getTarget (): Window {\n    return this.targetWindow;\n  }\n\n  getTargetId (): string {\n    return this.broker.getTargetId();\n  }\n\n  register (name: string, callback: ProcedureCallback): void  {\n    this.registeredCallbacks.set(name, callback);\n  }\n\n  getCallback (name: string): ProcedureCallback {\n    return this.registeredCallbacks.get(name);\n  }\n\n  call<T=any> (name: string, ...args: any[]): Promise<T> {\n    const request: ProcedureRequest = {\n      id: uuidv4(),\n      name,\n      args,\n      resolved: false\n    };\n\n    // Check immediately if there is a callback in this scope so as to avoid generating events\n    const callback = this.getCallback(request.name);\n    if(callback) {\n      return this.applyCallback<T>(request, callback);\n    }\n\n    return new Promise((resolve, reject) => {\n      let tou: number = null;\n      const subscription = this.broker.subscribe(`${PROCEDURE_RESPONSE_TOPIC}:${request.id}`, (response: ProcedureResponse<T>) => {\n        subscription.unsubscribe();\n        window.clearTimeout(tou);\n        resolve(response.result);\n      });\n      tou = window.setTimeout(() => {\n        subscription.unsubscribe();\n        reject(new Error(`Procedure request timeout (${this.responseTimeout}) for callback with name \"${name}\"`));\n      }, this.responseTimeout);\n      this.broker.publish(PROCEDURE_REQUEST_TOPIC, request, false);\n    });\n  }\n\n  private initProcedureRequestListener (): void {\n    const targetExt   = this.targetWindow as ProcedureBrokerTargetExtended;\n    if(!targetExt.__MfProcedureBrokerHasListener) {\n      this.subscription = this.broker.subscribe(PROCEDURE_REQUEST_TOPIC, async (request: ProcedureRequest) => {\n        const callback = this.getCallback(request.name);\n        if(callback) {\n          const result = await this.applyCallback(request, callback);\n          const response: ProcedureResponse = {\n            id: request.id,\n            name: request.name,\n            result\n          };\n          this.broker.publish(`${PROCEDURE_RESPONSE_TOPIC}:${request.id}`, response, false);\n        }\n      });\n      targetExt.__MfProcedureBrokerHasListener = true;\n    }\n  }\n\n  private async applyCallback<T> (request: ProcedureRequest, callback: ProcedureCallback<T>): Promise<T> {\n    let result = callback(...request.args);\n    request.resolved = true;\n    if(result instanceof Promise) {\n      result = await result;\n    }\n    return result;\n  }\n\n  static getInstance (broker: Broker, responseTimeout: number): ProcedureBroker {\n    const targetExt = broker.getTarget() as ProcedureBrokerTargetExtended;\n    if(!targetExt.__MfProcedureBrokerInstance) {\n      targetExt.__MfProcedureBrokerInstance = new ProcedureBroker(broker, responseTimeout);\n    }\n    return targetExt.__MfProcedureBrokerInstance;\n  }\n}\n"],"names":["uuidv4","window","crypto","toString","replace","k","c","parseInt","getRandomValues","Uint8Array","r","Math","random","Broker","[object Object]","target","this","__MfBrokerRetained","Map","targetExt","__MfBrokerTargetId","topic","data","retain","publishWithTarget","info","date","Date","id","publishCustom","topicStr","topicAsString","event","CustomEvent","detail","bubbles","cancelable","composed","detailInfo","retainData","set","dispatchEvent","callback","listener","call","addEventListener","lastPublish","get","broker","unsubscribe","removeEventListener","Object","assign","__MfBrokerInstance","Array","isArray","join","FramesetBroker","acceptedOrigins","targetWindow","getTarget","location","origin","getTargetId","initEventPropagationListener","messageData","publish","requestEventPropagation","senderId","subscribe","getRetained","__MfFramesetBrokerHasListener","includes","message","isFramesetBrokerMessage","isSentFromCurrentTarget","propagateIntoCurrentTarget","propagateToChildsTargets","currentId","targetOrigin","topWindow","top","postMessage","frames","from","document","querySelectorAll","result","frameNode","contentWindow","push","getChildsTargets","forEach","__MfFramesetBrokerInstance","ProcedureBroker","responseTimeout","initProcedureRequestListener","name","registeredCallbacks","args","request","resolved","getCallback","applyCallback","Promise","resolve","reject","tou","subscription","response","clearTimeout","setTimeout","Error","__MfProcedureBrokerHasListener","__MfProcedureBrokerInstance"],"mappings":"SAGgBA,IACd,OAAGC,OAAOC,QACA,IAAMC,YAAc,KAAO,KAAO,KAAO,MAAMC,QAAQ,SAAWC,IACxE,MAAMC,EAAIC,SAASF,EAAG,IACtB,OAAQC,EAAIL,OAAOC,OAAOM,gBAAgB,IAAIC,WAAW,IAAI,GAAK,IAAMH,EAAI,GAAGH,SAAS,MAGrF,uCAAuCC,QAAQ,SAAS,SAAUE,GACvE,MAAMI,EAAoB,GAAhBC,KAAKC,SAAgB,EAC/B,OAD4C,MAANN,EAAYI,EAAS,EAAJA,EAAU,GACxDP,SAAS,aCiCTU,EAEXC,YAAsBC,EAAiBd,QAAjBe,YAAAD,EACFC,KAAKD,OACbE,mBAAqB,IAAIC,IAGrCJ,YACE,OAAOE,KAAKD,OAGdD,cACE,MAAMK,EAAYH,KAAKD,OAIvB,OAHII,EAAUC,qBACZD,EAAUC,mBAAqB,KAAKpB,OAE/BmB,EAAUC,mBAGnBN,QAAgBO,EAAoBC,EAASC,GAAkB,GAC7D,OAAOP,KAAKQ,kBAAqBR,KAAKD,OAAQM,EAAOC,EAAMC,GAG7DT,kBAA0BC,EAAsBM,EAAoBC,EAASC,GAAkB,GAC7F,MAAME,EAA8B,CAClCC,KAAM,IAAIC,KACVJ,OAAAA,EACAK,GAAI,KAAK5B,OAEX,OAAOgB,KAAKa,cAAcd,EAAQM,EAAOI,EAAMH,GAGjDR,cAAsBC,EAAsBM,EAAoBI,EAA6BH,GAC3F,MAAMH,EAAYH,KAAKD,OACjBe,EAAYjB,EAAOkB,cAAcV,GACjCW,EAA8B,IAAIC,YAAYH,EAAU,CAC5DI,OAAQZ,EACRa,SAAS,EACTC,YAAY,EACZC,UAAU,IAEZL,EAAMM,WAAab,EACnB,MAAMc,EAAa,CAAEjB,KAAAA,EAAMG,KAAAA,EAAMO,MAAAA,GAKjC,OAJGP,EAAKF,QACNJ,EAAUF,mBAAmBuB,IAAIV,EAAUS,GAE7CxB,EAAO0B,cAAcT,GACdO,EAGTzB,UAAkBO,EAAoBqB,GACpC,MAAMvB,EAAYH,KAAKD,OACjBe,EAAejB,EAAOkB,cAAcV,GACpCsB,EAAgBX,IACpBU,EAASE,KAAKzB,EAAWa,EAAME,OAAQF,IAKzC,GAFAb,EAAU0B,iBAAiBf,EAAUa,GAAU,GAE5CxB,EAAUF,mBAAoB,CAC/B,MAAM6B,EAAc3B,EAAUF,mBAAmB8B,IAAIjB,GAClDgB,GACDJ,EAASE,KAAKzB,EAAW2B,EAAYxB,KAAMwB,EAAYd,OAI3D,MAAO,CACLgB,OAAQhC,KACRK,MAAOS,EACPY,SAAAA,EACAO,YAAa,KACXjC,KAAKD,OAAOmC,oBAAoBpB,EAAUa,GAAU,KAO1D7B,YAAaO,GACX,MAAMF,EAAYH,KAAKD,OACjBe,EAAejB,EAAOkB,cAAcV,GACpCyB,EAAe3B,EAAUF,mBAAmB8B,IAAIjB,GACtD,OAAGgB,EACMK,OAAOC,OAAO,GAAIN,GAEpB,KAGThC,mBAAoBC,EAAiBd,QACnC,MAAMkB,EAAYJ,EAIlB,OAHII,EAAUkC,qBACZlC,EAAUkC,mBAAqB,IAAIxC,EAAOE,IAErCI,EAAUkC,mBAGnBvC,qBAAsBO,GAIpB,OAHGiC,MAAMC,QAAQlC,KACfA,EAAQA,EAAMmC,KAAK,MAEdnC,SC9HEoC,EAGX3C,YACUkC,EACCU,EAA4B,MAD7B1C,YAAAgC,EACChC,qBAAA0C,EAET1C,KAAK2C,aAAeX,EAAOY,YAEvB5C,KAAK0C,kBACP1C,KAAK0C,gBAAkB,CAACV,EAAOY,YAAYC,SAASC,SAGtD9C,KAAK+C,cACL/C,KAAKgD,+BAGPlD,YACE,OAAOE,KAAK2C,aAGd7C,cACE,OAAOE,KAAKgC,OAAOe,cAGrBjD,QAAgBO,EAAoBC,EAASC,GAAkB,GAC7D,MAAMO,EAAcjB,EAAOkB,cAAcV,GACnC4C,EAAcjD,KAAKgC,OAAOkB,QAAWpC,EAAUR,EAAMC,GACrDJ,EAAcH,KAAK2C,aAQzB,OAPA3C,KAAKmD,wBAAwB,CAC3BC,SAAUjD,EAAUC,mBACpBQ,GAAI,KAAK5B,MACTqB,MAAOS,EACPL,KAAMwC,EAAYxC,KAClBH,KAAM2C,EAAY3C,OAEb2C,EAGTnD,UAAkBO,EAAoBqB,GACpC,OAAO1B,KAAKgC,OAAOqB,UAAchD,EAAOqB,GAG1C5B,YAAaO,GACX,OAAOL,KAAKgC,OAAOsB,YAAYjD,GAGzBP,+BACN,MAAMK,EAAcH,KAAK2C,aACrBxC,EAAUoD,gCACZpD,EAAU0B,iBAAiB,UAAYb,IACrC,GAAGhB,KAAK0C,gBAAgBc,SAASxC,EAAM8B,QAAS,CAC9C,MAAMW,EAAUzC,EAAMV,KACnBN,KAAK0D,wBAAwBD,KAAazD,KAAK2D,wBAAwBF,KACxEzD,KAAK4D,2BAA2BH,GAChCzD,KAAK6D,yBAAyBJ,EAASzC,EAAM8B,YAInD3C,EAAUoD,+BAAgC,GAItCzD,wBAAyB2D,GAC/B,OAAQA,EAAQL,UAAYK,EAAQ7C,IAAM6C,EAAQhD,MAAQgD,EAAQnD,KAG5DR,wBAAyB2D,GAC/B,MAAMK,EAAY9D,KAAK+C,cACvB,OAAQU,EAAQL,WAAaU,EAGvBhE,wBAAyB2D,EAAgCM,EAAuB/D,KAAK2C,aAAaE,SAASC,QACjH,MAAMkB,EAAYhE,KAAK2C,aAAasB,IACjCD,GAAaA,IAAchE,KAAK2C,cACjCqB,EAAUE,YAAYT,EAASM,GAEjC/D,KAAK6D,yBAAyBJ,EAASM,GAGjCjE,mBACN,MAAMqE,EAAS,IACV7B,MAAM8B,KAAKpE,KAAK2C,aAAa0B,SAASC,iBAAiB,aACvDhC,MAAM8B,KAAKpE,KAAK2C,aAAa0B,SAASC,iBAAiB,YAEtDC,EAAmB,GACzB,IAAI,MAAMC,KAAaL,EAClBK,EAAUC,eACXF,EAAOG,KAAKF,EAAUC,eAG1B,OAAOF,EAGDzE,2BAA4B2D,GAClCzD,KAAKgC,OAAOnB,cAAcb,KAAK2C,aAAcc,EAAQpD,MAAOoD,EAAQhD,KAAMgD,EAAQnD,MAG5ER,yBAA0B2D,EAAgCM,GAChD/D,KAAK2E,mBACbC,QAAS7E,IACfA,EAAOmE,YAAYT,EAASM,KAIhCjE,mBAAoBkC,GAClB,MAAM7B,EAAY6B,EAAOY,YAIzB,OAHIzC,EAAU0E,6BACZ1E,EAAU0E,2BAA6B,IAAIpC,EAAeT,IAErD7B,EAAU0E,uUCnGRC,EAKXhF,YACUkC,EACA+C,EAA0B,KAD1B/E,YAAAgC,EACAhC,qBAAA+E,EALF/E,yBAAsD,IAAIE,IAOhEF,KAAK2C,aAAeX,EAAOY,YAC3B5C,KAAK+C,cACL/C,KAAKgF,+BAGPlF,kBAAmBiF,GACjB/E,KAAK+E,gBAAkBA,EAGzBjF,YACE,OAAOE,KAAK2C,aAGd7C,cACE,OAAOE,KAAKgC,OAAOe,cAGrBjD,SAAUmF,EAAcvD,GACtB1B,KAAKkF,oBAAoB1D,IAAIyD,EAAMvD,GAGrC5B,YAAamF,GACX,OAAOjF,KAAKkF,oBAAoBnD,IAAIkD,GAGtCnF,KAAamF,KAAiBE,GAC5B,MAAMC,EAA4B,CAChCxE,GAAI5B,IACJiG,KAAAA,EACAE,KAAAA,EACAE,UAAU,GAIN3D,EAAW1B,KAAKsF,YAAYF,EAAQH,MAC1C,OAAGvD,EACM1B,KAAKuF,cAAiBH,EAAS1D,GAGjC,IAAI8D,QAAQ,CAACC,EAASC,KAC3B,IAAIC,EAAc,KAClB,MAAMC,EAAe5F,KAAKgC,OAAOqB,UAAU,eAA+B+B,EAAQxE,KAAOiF,IACvFD,EAAa3D,cACbhD,OAAO6G,aAAaH,GACpBF,EAAQI,EAAStB,UAEnBoB,EAAM1G,OAAO8G,WAAW,KACtBH,EAAa3D,cACbyD,EAAO,IAAIM,MAAM,8BAA8BhG,KAAK+E,4CAA4CE,QAC/FjF,KAAK+E,iBACR/E,KAAKgC,OAAOkB,QA9De,cA8DkBkC,GAAS,KAIlDtF,+BACN,MAAMK,EAAcH,KAAK2C,aACrBxC,EAAU8F,iCACZjG,KAAK4F,aAAe5F,KAAKgC,OAAOqB,UArEL,cAqE+C+B,qCACxE,MAAM1D,EAAW1B,KAAKsF,YAAYF,EAAQH,MAC1C,GAAGvD,EAAU,CACX,MAAM6C,QAAevE,KAAKuF,cAAcH,EAAS1D,GAC3CmE,EAA8B,CAClCjF,GAAIwE,EAAQxE,GACZqE,KAAMG,EAAQH,KACdV,OAAAA,GAEFvE,KAAKgC,OAAOkB,QAAQ,eAA+BkC,EAAQxE,KAAMiF,GAAU,QAG/E1F,EAAU8F,gCAAiC,GAIjCnG,cAAkBsF,EAA2B1D,4CACzD,IAAI6C,EAAS7C,KAAY0D,EAAQD,MAKjC,OAJAC,EAAQC,UAAW,EAChBd,aAAkBiB,UACnBjB,QAAeA,GAEVA,KAGTzE,mBAAoBkC,EAAgB+C,GAClC,MAAM5E,EAAY6B,EAAOY,YAIzB,OAHIzC,EAAU+F,8BACZ/F,EAAU+F,4BAA8B,IAAIpB,EAAgB9C,EAAQ+C,IAE/D5E,EAAU+F"}